#summary Überblick der Funktionen und Templates von »strings.xsl«
#labels Dokumentation
#sidebar TableOfContents

= {{{strings.xsl}}} =

Stylesheet: [http://code.google.com/p/xslt-sb/source/browse/trunk/xslt-sb/strings.xsl strings.xsl]

Dieses Stylesheet enthält Funktionen für Strings und Texte.

Da für Testroutinen Funktionen und Templates aus `internals.xsl` benötigt werden, wird dieses Stylesheet in `strings_tests.xsl` getestet.


_Hinweis: Die Dokumentation entstammt dem Stylesheet selbst, die Funktionen und Templates sind dort ausführlich dokumentiert._

= Liste der Funktionen =

|| *C* || *[xsb_count_matches xsb:count-matches]*({{{string}}} _as_ {{{xs:string?}}}; {{{regex}}} _as_ {{{xs:string?}}}; {{{flags}}} _as_ {{{xs:string?}}}) ||   || zählt das Vorkommen eines Suchstrings in einem String ||
||   || *[xsb_count_matches xsb:count-matches]*({{{string}}} _as_ {{{xs:string?}}}; {{{regex}}} _as_ {{{xs:string?}}}) ||   || zählt das Vorkommen eines Suchstrings in einem String ||
|| *E* || *[xsb_encode_for_id xsb:encode-for-id]*({{{input}}} _as_ {{{xs:string?}}}) ||   || wandelt einen eingegebenen String in eine xs:ID um, indem verbotene Zeichen ersetzt werden ||
||   || *[xsb_escape_for_regex xsb:escape-for-regex]*({{{input}}} _as_ {{{xs:string?}}}) ||   || escapet Steuerzeichen in regulären Ausdrücken mit »`\`« ||
||   || *[xsb_escape_for_replacement xsb:escape-for-replacement]*({{{input}}} _as_ {{{xs:string?}}}) ||   || escapet Steuerzeichen in Ersetzungstexten für `fn:replace()` (»`\`« und »`$`«) mit »`\`« ||
|| *F* || *[xsb_fill_left xsb:fill-left]*({{{input}}} _as_ {{{xs:string?}}}; {{{fill-with}}} _as_ {{{xs:string?}}}; {{{length}}} _as_ {{{xs:integer}}}) ||   || füllt `$input` links bis zur Länge `$length` mit dem Zeichen `$fill-with auf` ||
||   || *[xsb_fill_right xsb:fill-right]*({{{input}}} _as_ {{{xs:string?}}}; {{{fill-with}}} _as_ {{{xs:string?}}}; {{{length}}} _as_ {{{xs:integer}}}) ||   || füllt `$input` rechts bis zur Länge `$length` mit dem Zeichen `$fill-with auf` ||
|| *I* || *[xsb_index_of_first_match xsb:index-of-first-match]*({{{input}}} _as_ {{{xs:string?}}}; {{{pattern}}} _as_ {{{xs:string?}}}; {{{flags}}} _as_ {{{xs:string?}}}) ||   || ermittelt die Position des ersten Auftretens von `pattern` in `string` ||
||   || *[xsb_index_of_first_match xsb:index-of-first-match]*({{{input}}} _as_ {{{xs:string?}}}; {{{pattern}}} _as_ {{{xs:string?}}}) ||   || ermittelt die Position des ersten Auftretens von `pattern` in `string` ||
|| *L* || *[xsb_lax_string_compare xsb:lax-string-compare]*({{{input}}} _as_ {{{xs:string?}}}; {{{compare-to}}} _as_ {{{xs:string?}}}) ||   || Verarbeitet Eingabe und Vergleichswert mit `normalize-space()` und `lower-case()` und vergleicht dann Eingabe und Vergleichswert. Dadurch werden kleine Differenzen ignoriert. ||
||   || *[xsb_listed xsb:listed]*({{{list}}} _as_ {{{xs:string?}}}; {{{item}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob in einer Leerzeichen-getrennten Liste ein bestimmter Eintrag vorhanden ist. ||
|| *N* || *[xsb_normalize_paragraphs xsb:normalize-paragraphs]*({{{input}}} _as_ {{{xs:string?}}}) ||   || ersetzt mehrfache Zeilenwechsel durch einen einzelnen Zeilenwechsel. Im Unterschied zu `normalize-space()` wird ein Zeilenwechsel aber erhalten. ||
|| *R* || *[xsb_replace xsb:replace]*({{{input}}} _as_ {{{xs:string?}}}; {{{pattern}}} _as_ {{{xs:string*}}}; {{{replacement}}} _as_ {{{xs:string*}}}; {{{flags}}} _as_ {{{xs:string?}}}) ||   || führt wiederholtes paarweises Suchen und Ersetzen über einen String aus ||
||   || *[xsb_replace xsb:replace]*({{{input}}} _as_ {{{xs:string?}}}; {{{pattern}}} _as_ {{{xs:string*}}}; {{{replacement}}} _as_ {{{xs:string*}}}) ||   || führt wiederholtes paarweises Suchen und Ersetzen über einen String aus ||
||   || *[xsb_return_composed_string_if_not_empty xsb:return-composed-string-if-not-empty]*({{{string-before}}} _as_ {{{xs:string?}}}; {{{tested-string}}} _as_ {{{xs:string?}}}; {{{string-after}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion fügt vor und nach dem zu testenden String die übergebenen Strings ein, wenn der zu testende String nicht leer ist. ||
||   || *[xsb_return_default_if_empty xsb:return-default-if-empty]*({{{input}}} _as_ {{{xs:string?}}}; {{{default}}} _as_ {{{xs:string?}}}) ||   || gibt einen übergebenen Standardwert aus, wenn der übergeben String leer ist oder nur Whitespace enthält, sonst den String selbst ||
|| *S* || *[xsb_sort xsb:sort]*({{{input-sequence}}} _as_ {{{xs:anyAtomicType*}}}) ||   || sortiert `atomic values` ||
||   || *[xsb_sort xsb:sort]*({{{input-sequence}}} _as_ {{{xs:anyAtomicType*}}}; {{{order}}} _as_ {{{xs:string}}}) ||   || sortiert `atomic values` ||
|| *T* || *[xsb_trim xsb:trim]*({{{input}}} _as_ {{{xs:string?}}}) ||   || entfernt Whitespace am Anfang und am Ende. Im Unterschied zu `normalize-space()` wird Whitespace in der Mitte nicht berücksichtigt. ||
||   || *[xsb_trim_left xsb:trim-left]*({{{input}}} _as_ {{{xs:string?}}}) ||   || entfernt führenden Whitespace ||
||   || *[xsb_trim_right xsb:trim-right]*({{{input}}} _as_ {{{xs:string?}}}) ||   || entfernt Whitespace am Ende eines Strigs ||

_Hinweis: Diese Wiki-Seite wird automatisch aus der Dokumentation der einzenen Stylesheets der XSLT-SB erzeugt und soll deshalb nicht bearbeitet werden._

_Seite erstellt am 28.05.2012_


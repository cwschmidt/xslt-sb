#summary Überblick der Funktionen und Templates der XSL-SB
#labels Dokumentation

= Liste der Funktionen =

|| *A* || *intern:acos*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || ermittelt den Arkuskosinus (im Bogenmaß) ||
||   || *intern:asin*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || ermittelt den Arkussinus (im Bogenmaß) ||
||   || *intern:atan*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || ermittelt den Arkustangens (im Bogenmaß) ||
||   || *intern:atan-iterator*({{{arg}}} _as_ {{{xs:anyAtomicType}}}; {{{an}}} _as_ {{{xs:anyAtomicType}}}; {{{bn}}} _as_ {{{xs:anyAtomicType}}}; {{{konstanterDivisor}}} _as_ {{{xs:anyAtomicType}}}; {{{letztesResultat}}} _as_ {{{xs:anyAtomicType}}}; {{{iteration}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || Iteration zur Ermittlung des Arkustangens ||
||   || *intern:atan2*({{{y}}} _as_ {{{xs:anyAtomicType}}}; {{{x}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet `atan2(y, x) im Bogenmaß` ||
||   || *xsb:acos*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || ermittelt den Arkuskosinus (im Bogenmaß) ||
||   || *xsb:asin*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || ermittelt den Arkussinus (im Bogenmaß) ||
||   || *xsb:atan*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || ermittelt den Arkustangens (im Bogenmaß) ||
||   || *xsb:atan2*({{{y}}} _as_ {{{xs:anyAtomicType}}}; {{{x}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet `atan2(y, x) im Bogenmaß` ||
|| *C* || *intern:cast-INF*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || erzeugt `INF` mit dem Typ des übergebenen Arguments ||
||   || *intern:cast-NaN*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || erzeugt `NaN` mit dem Typ des übergebenen Arguments ||
||   || *intern:cast-negative-0*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || erzeugt `-0.0e0` mit dem Typ des übergebenen Arguments ||
||   || *intern:cast-negative-INF*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || erzeugt `-INF` mit dem Typ des übergebenen Arguments ||
||   || *intern:castable-as-xs-name*({{{string}}} _as_ {{{xs:string?}}}) || [MetaFunktionen] || Diese Funktion überprüft eine String darauf, ob er als `xs:Name` gecastest werden kann. Diese Funktion ist notwendig, weil `xs:Name` resp. `castable as xs:Name` nicht von einem Basic-XSLT-Prozessor unterstützt werden. ||
||   || *intern:castable-as-xs-ncname*({{{string}}} _as_ {{{xs:string?}}}) || [MetaFunktionen] || Diese Funktion überprüft eine String darauf, ob er als `xs:NCName` gecastest werden kann. Die Überprüfung erfolgt an Hand eines regulären Ausdruckes nach `http://www.w3.org/TR/REC-xml/#NT-Name`. ||
||   || *intern:cos*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet den Cosinus ||
||   || *intern:cosinus-iterator*({{{NormalisiertesArgument}}} _as_ {{{xs:anyAtomicType}}}; {{{vortrag}}} _as_ {{{xs:anyAtomicType}}}; {{{iteration}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || Iterator zur Berechnung des Kosinus ||
||   || *intern:cot*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet den Cotangens ||
||   || *xsb:cast*({{{arg}}} _as_ {{{xs:anyAtomicType}}}; {{{as}}} _as_ {{{xs:string}}}) || [Interne_Funktionen] || wandelt einen Atomic Value beliebigen Types in einen Atomic Value mit Typ entsprechend dem Parameter "`as`" um ||
||   || *xsb:cos*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet den Cosinus ||
||   || *xsb:cot*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet den Cotangens ||
||   || *xsb:current-vendor-hash*() || [Interne_Funktionen] || Diese Funktion ermittelt den Vendor-Hash für das aktuelle System. ||
|| *D* || *intern:deg-to-rad*({{{deg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || wandelt Gradmaß in Bogenmaß um ||
||   || *xsb:deg-to-rad*({{{deg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || wandelt Gradmaß in Bogenmaß um ||
|| *E* || *intern:exp*({{{exponent}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || Exponential-Funktion e^exponent ||
||   || *intern:exp-iterator*({{{exponent}}} _as_ {{{xs:anyAtomicType}}}; {{{vortrag}}} _as_ {{{xs:anyAtomicType}}}; {{{iteration}}} _as_ {{{xs:integer}}}; {{{pow-vortrag}}} _as_ {{{xs:anyAtomicType}}}; {{{fact-vortrag}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || Iterator zur Berechnung der e-Funktion (Reihenbildung) ||
||   || *intern:exp10*({{{exponent}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || Exponential-Funktion 10^exponent (Zehnerpotenzen) ||
||   || *xsb:e*() || [Mathematische_Funktionen] || Konstante e (Eulersche Zahl) mit 2,718281828459045235360287471353… ||
||   || *xsb:encode-for-id*({{{input}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || wandelt einen eingegebenen String in eine xs:ID um, indem verbotene Zeichen ersetzt werden ||
||   || *xsb:exp*({{{exponent}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || Exponential-Funktion e^exponent ||
||   || *xsb:exp10*({{{exponent}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || Exponential-Funktion 10^exponent (Zehnerpotenzen) ||
|| *F* || *intern:fact*({{{n}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || berechnet die Fakultät einer natürlichen Zahl ||
||   || *intern:fibonacci-sequence*({{{n}}} _as_ {{{xs:integer}}}; {{{vortrag}}} _as_ {{{xs:integer*}}}) || [Mathematische_Funktionen] || berechnet Fibonacci-Reihen ||
||   || *intern:file-exists*({{{absoluteURL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *intern:file-exists*({{{absoluteURL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *intern:file-exists*({{{absoluteURL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *intern:file-exists*({{{absoluteURL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *intern:format-INF-caller*({{{caller}}} _as_ {{{xs:string}}}; {{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || formatiert einen String für die Fehlerausgabe ||
||   || *intern:function-argument-string*({{{StringOfAFunctionCall}}} _as_ {{{xs:string?}}}) || [MetaFunktionen] || Diese Funktion gibt aus einem String, der wie ein Funktionsaufruf aussieht, einen String der vermeintlichen Argumente zurück. ||
||   || *intern:function-arguments*({{{StringOfAFunctionCall}}} _as_ {{{xs:string?}}}) || [MetaFunktionen] || Diese Funktion erzeugt eine Sequence von Strings der Argumente aus einem String, der wie eine Funktion aussieht. ||
||   || *intern:function-arity*({{{StringOfAFunctionCall}}} _as_ {{{xs:string?}}}) || [MetaFunktionen] || ermittelt die Arity (d.h. die Anzahl der Argumente) einer Funktion ||
||   || *intern:function-name*({{{StringOfAFunctionCall}}} _as_ {{{xs:string?}}}) || [MetaFunktionen] || ermittelt den Namen einer Funktion aus einem String, der wie eine Funktion aussieht ||
||   || *xsb:fact*({{{n}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet die Fakultät einer natürlichen Zahl ||
||   || *xsb:fibonacci*({{{n}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || berechnet Fibonacci-Zahlen ||
||   || *xsb:fibonacci-sequence*({{{n}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || berechnet Fibonacci-Reihen ||
||   || *xsb:file-exists*({{{absoluteURL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:file-exists*({{{relativeURL}}} _as_ {{{xs:string?}}}; {{{baseURL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:file-extension-from-mediatype*({{{mediatype}}} _as_ {{{xs:string?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Dateien_und_Dateisystem] || Diese Funktion ermittelt aus dem Mediatyp (auch `MIME-Typ` genannt) die Dateierweiterung. ||
||   || *xsb:file-extension-from-mediatype*({{{mediatype}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion ermittelt aus dem Mediatyp (auch `MIME-Typ` genannt) die Dateierweiterung. ||
||   || *xsb:fileExtention-from-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion ermittelt eine eventuelle Dateierweiterung aus einer URL. ||
||   || *xsb:fileName-and-fileExtention-from-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion gibt Dateinamen und Dateierweiterung aus einer URL zurück. ||
||   || *xsb:fileName-from-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion ermittelt einen Dateinamen ohne eventuelle Dateierweiterung aus einer URL. ||
||   || *xsb:force-cast-to-decimal*({{{input}}} _as_ {{{xs:string?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Zahlen_und_Rechnen] || Diese Funktion erzwingt die Umwandlung eines Strings in `xs:decimal`. ||
||   || *xsb:force-cast-to-decimal*({{{input}}} _as_ {{{xs:string?}}}) || [Zahlen_und_Rechnen] || Diese Funktion erzwingt die Umwandlung eines Strings in `xs:decimal`. ||
||   || *xsb:force-cast-to-integer*({{{input}}} _as_ {{{xs:string?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Zahlen_und_Rechnen] || Diese Funktion erzwingt die Umwandlung eines Strings in `xs:integer`. ||
||   || *xsb:force-cast-to-integer*({{{input}}} _as_ {{{xs:string?}}}) || [Zahlen_und_Rechnen] || Diese Funktion erzwingt die Umwandlung eines Strings in `xs:integer`. ||
||   || *xsb:fragment-from-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion gibt den Fragment-Teil von einer URL zurück. ||
|| *H* || *intern:half-pi*() || [Mathematische_Funktionen] || Pi/2 (Konstante) ||
|| *I* || *intern:iround*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || rundet Zahlen für interne Zwecke ||
||   || *xsb:is*({{{input1}}}; {{{input2}}}) || [Interne_Funktionen] || Diese Funktion vergleicht zwei beliebig getypte Werte und gibt bei Idendität `true()` zurück, d.h. der Vergleich ist eine Kombination aus `eq` und `deep-equal()` mit höherer Empfindlichkeit und einigen Sonderfällen. ||
||   || *xsb:is-absolute-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL absolut ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:is-in-range*({{{value}}} _as_ {{{xs:anyAtomicType?}}}; {{{minInclusive}}} _as_ {{{xs:anyAtomicType}}}; {{{maxInclusive}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || überprüft, ob ein numerischer Wert innerhalb eines Wertebereiches liegt ||
||   || *xsb:is-INF*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || testet, ob ein numerischer Wert `INF` ist ||
||   || *xsb:is-NaN*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || testet, ob ein numerischer Wert `NaN` ist ||
||   || *xsb:is-negative-0*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || testet, ob ein numerischer Wert `-0.0e0` ist ||
||   || *xsb:is-negative-INF*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || testet, ob ein numerischer Wert `-INF` ist ||
||   || *xsb:is-network-server-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL ausschließlich einen Netzwerk-Server referenziert, d.h. keinen lokalen Teil hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:is-path-only-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL ein Pfad ist, d.h. es wird durch die URL keine Datei referenziert. Kriterium ist, ob die URL entweder (a) einen Netzwerk-Server referenziert oder (b) mit "/", "/." oder "/.." endet oder (c) "." oder ".." ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:is-relative-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL relativ ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:is-roman-numeral*({{{input}}} _as_ {{{xs:string?}}}) || [Zahlen_und_Rechnen] || Diese Funktion überprüft, ob der angegebene String eine römische Zahl ist. ||
||   || *xsb:is-shortcut-only-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL nur aus Pfad-Shortcuts ("/", ".", "..") besteht. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:is-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob der eingegebene String eine gültige URL gemäß `RFC 1808` ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
|| *J* || *xsb:java-available*() || [Interne_Funktionen] || Diese Funktion ermittelt – zusammen mit der folgenden – ob Java auf dem ausführenden System zur Verfügung steht. ||
||   || *xsb:java-available*() || [Interne_Funktionen] || Diese Funktion ermittelt – zusammen mit der folgenden – ob Java auf dem ausführenden System zur Verfügung steht. ||
|| *L* || *intern:linear-congruential-generator*({{{length}}} _as_ {{{xs:integer}}}; {{{vortrag}}} _as_ {{{xs:integer+}}}) || [Mathematische_Funktionen] || linearer Kongruenzgenerator, erzeugt Pseudo-Zufallszahlen ||
||   || *intern:ln10*() || [Mathematische_Funktionen] || natürlicher Logarithmus von 10 mit 2,3025850929940456840179914546844… (Konstante) ||
||   || *intern:ln2*() || [Mathematische_Funktionen] || natürlicher Logarithmus von 2 mit 0,69314718055994530941723212145818 (Konstante) ||
||   || *intern:log*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet den natürlichen Logarithmus ||
||   || *intern:log-iterator*({{{argm}}} _as_ {{{xs:anyAtomicType}}}; {{{argp}}} _as_ {{{xs:anyAtomicType}}}; {{{vortrag}}} _as_ {{{xs:anyAtomicType}}}; {{{iteration}}} _as_ {{{xs:integer}}}; {{{n-iteration}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || Iteration zur Ermittlung des natürlichen Logarithmus ||
||   || *intern:log-m-iterator*({{{x}}} _as_ {{{xs:anyAtomicType}}}; {{{m}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || ermittelt einen Faktor, um intern:log-iterator in einem Bereich mit günstiger Konvergenz ausführen zu können. ||
||   || *intern:log10*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet den Logarithmus zur Basis 10 (dekadischer Logarithmus) und rundet das Ergebnis ||
||   || *intern:looks-like-a-function-call*({{{StringOfAFunctionCall}}} _as_ {{{xs:string?}}}) || [MetaFunktionen] || Diese Funktion überprüft eine String darauf, ob er wie der Aufruf einer XSLT-/Xpath-Funktion aussieht. Es werden nur zwei Dinge getestet:   1) per regulärem Ausdruck wird geprüft, ob der String aus einem Namen + einem geklammerten Ausdruck besteht und   2) per Simulation von `castable as xs:Name` wird geprüft, ob der vermeintliche Funktionsname ein XML-Name ist. Die Simulation ist notwendig, weil der Typ `xs:Name` nicht von einem Basic-XSLT-Prozessor unterstützt wird.     ||
||   || *xsb:lax-string-compare*({{{input}}} _as_ {{{xs:string?}}}; {{{compare-to}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || Verarbeitet Eingabe und Vergleichswert mit `normalize-space()` und `lower-case()` und vergleicht dann Eingabe und Vergleichswert. Dadurch werden kleine Differenzen ignoriert. ||
||   || *xsb:listed*({{{list}}} _as_ {{{xs:string?}}}; {{{item}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || Diese Funktion überprüft, ob in einer Leerzeichen-getrennten Liste ein bestimmter Eintrag vorhanden ist. ||
||   || *xsb:log*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet den natürlichen Logarithmus ||
||   || *xsb:log10*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet den Logarithmus zur Basis 10 (dekadischer Logarithmus) und rundet das Ergebnis ||
||   || *xsb:logging-level*({{{verbal-logging-level}}} _as_ {{{xs:string?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || Diese Funktion wandelt die verbalen Logging-Level »`ALL`« > »`TRACE`« > »`DEBUG`« > »`INFO`« > »`WARN`« > »`ERROR`« > »`FATAL`« in korrspondierende Integer-Werte von 0 bis 6 um. ||
||   || *xsb:logging-level*({{{verbal-logging-level}}} _as_ {{{xs:string?}}}) || [Interne_Funktionen] || Diese Funktion wandelt die verbalen Logging-Level »`ALL`« > »`TRACE`« > »`DEBUG`« > »`INFO`« > »`WARN`« > »`ERROR`« > »`FATAL`« in korrspondierende Integer-Werte von 0 bis 6 um. ||
|| *M* || *xsb:mediatype-from-url*({{{URLwithFileExtension}}} _as_ {{{xs:string?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Dateien_und_Dateisystem] || Diese Funktion ermittelt aus der Dateierweiterung den Mediatyp (auch `MIME-Typ` genannt). ||
||   || *xsb:mediatype-from-url*({{{URLwithFileExtension}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion ermittelt aus der Dateierweiterung den Mediatyp (auch `MIME-Typ` genannt). ||
|| *N* || *intern:normalize-rad*({{{rad}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || rechnet Winkel auf den Bereich von `- 2 {{{*}}} Pi` bis `2 {{{*}}} Pi` um ||
||   || *intern:nroot*({{{wurzelbasis}}} _as_ {{{xs:anyAtomicType}}}; {{{wurzelexponent}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || berechnet die n-te Wurzel (n = Wurzelexponent) ||
||   || *xsb:node-kind*({{{context}}} _as_ {{{node()?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || Diese Funktion ermittelt die Art eines `node()`, d.h. sie gibt je nach übergebenen Knoten einen der Werte »`document-node`«, »`element`«, »`attribute`«, »`text`«, »`comment`«, »`processing-instruction`« oder »`namespace`« zurück. Schlagen all Versuche zur Ermittlung fehl, wird der Wert `#undefined` zurückgegeben (Mir ist kein entsprechender Input-node() bekannt). ||
||   || *xsb:node-kind*({{{context}}} _as_ {{{node()?}}}) || [Interne_Funktionen] || Diese Funktion ermittelt die Art eines `node()`, d.h. sie gibt je nach übergebenen Knoten einen der Werte »`document-node`«, »`element`«, »`attribute`«, »`text`«, »`comment`«, »`processing-instruction`« oder »`namespace`« zurück. Schlagen all Versuche zur Ermittlung fehl, wird der Wert `#undefined` zurückgegeben (Mir ist kein entsprechender Input-node() bekannt). ||
||   || *xsb:normalize-paragraphs*({{{input}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || ersetzt mehrfache Zeilenwechsel durch einen einzelnen Zeilenwechsel. Im Unterschied zu `normalize-space()` wird ein Zeilenwechsel aber erhalten. ||
||   || *xsb:nroot*({{{wurzelbasis}}} _as_ {{{xs:anyAtomicType}}}; {{{wurzelexponent}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || berechnet die n-te Wurzel (n = Wurzelexponent) ||
|| *P* || *intern:pow*({{{basis}}} _as_ {{{xs:anyAtomicType}}}; {{{exponent}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet die Potenz basis^exponent ||
||   || *intern:power*({{{basis}}} _as_ {{{xs:anyAtomicType}}}; {{{exponent}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || berechnet die Potenz basis^exponent für ganzzahlige Exponenten (multiplikative Methode) ||
||   || *xsb:parse-string-to-boolean*({{{input}}} _as_ {{{xs:string?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || Diese Funktion wandelt eine String-Eingabe in einen Boolean-Wert um. Sie kennt dabei mehr Begriffe als `boolean()`, z.B. »`ja`«/»`nein`«. ||
||   || *xsb:parse-string-to-boolean*({{{input}}} _as_ {{{xs:string?}}}) || [Interne_Funktionen] || Diese Funktion wandelt eine String-Eingabe in einen Boolean-Wert um. Sie kennt dabei mehr Begriffe als `boolean()`, z.B. »`ja`«/»`nein`«. ||
||   || *xsb:path-from-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion ermittelt einen Pfad ohne eventuelle Dateinamen und Dateierweiterung aus einer URL. ||
||   || *xsb:pi*() || [Mathematische_Funktionen] || Konstante Pi mit 3,14159265358979323846264338327950288419716939937511… ||
||   || *xsb:pow*({{{basis}}} _as_ {{{xs:anyAtomicType}}}; {{{exponent}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet die Potenz basis^exponent ||
|| *Q* || *xsb:query-from-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion gibt den Query-Teil von einer URL zurück. ||
|| *R* || *intern:rad-to-deg*({{{rad}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || rechnet Bogenmaß in Gradmaß um ||
||   || *intern:random-seed*({{{volatile}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || erzeugt eine Zufallszahl ||
||   || *intern:random-sequence*({{{length}}} _as_ {{{xs:integer}}}; {{{volatile}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || erzeugt eine Sequenz von Pseudo-Zufallszahlen im Bereich zwischen 0 und 1 ||
||   || *intern:render-context-and-parent-as-string*({{{context}}} _as_ {{{node()?}}}) || [Interne_Funktionen] || Diese Funktion erzeugt aus dem Kontext eines Knotens und dessen Elternknoten einen String in Form eines XPath-Ausdruckes, der diesen Knoten beschreibt. Kann z.B. zur Erläuterung bei Fehlermeldungen eingesetzt werden. ||
||   || *intern:render-level-to-pretext*({{{level}}} _as_ {{{xs:string?}}}) || [Interne_Funktionen] || Erzeugt zu den verbalen Fehlerwerten »`ALL`« > »`TRACE`« > »`DEBUG`« > »`INFO`« > »`WARN`« > »`ERROR`« > »`FATAL`« einen String, der bei ``xsb:internals.Error`` und verwandten Templates als `preText` verwendet werden kann. ||
||   || *intern:replace-nested-brackets-with-dashes*({{{input}}} _as_ {{{xs:string?}}}) || [MetaFunktionen] || Diese Funktion ist eine Hilfsfunktion, die nur existiert, weil rekursive Aufrufe notwendig waren. Details sind nicht interssant. ||
||   || *intern:root-iterator*({{{n}}} _as_ {{{xs:integer}}}; {{{x}}} _as_ {{{xs:anyAtomicType}}}; {{{y}}} _as_ {{{xs:anyAtomicType}}}; {{{yn}}} _as_ {{{xs:anyAtomicType}}}; {{{iteration}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || iterative Wurzelberechnung nach dem Heron-Verfahren ||
||   || *intern:round*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || rundet Zahlen einheitlich für die Ausgabe der mathematischen Funktionen der XSLT-SB ||
||   || *xsb:rad-to-deg*({{{rad}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || rechnet Bogenmaß in Gradmaß um ||
||   || *xsb:random*({{{volatile}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || erzeugt eine Zufallszahl im Bereich zwischen 0 und 1 ||
||   || *xsb:random-sequence*({{{length}}} _as_ {{{xs:anyAtomicType}}}; {{{volatile}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || erzeugt eine Sequenz von Pseudo-Zufallszahlen im Bereich zwischen 0 und 1 ||
||   || *xsb:remove-query-and-fragment-from-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion entfernt Query- und Fragment-Teil von einer URL. ||
||   || *xsb:render-context-as-string*({{{context}}} _as_ {{{node()?}}}) || [Interne_Funktionen] || Diese Funktion erzeugt aus dem Kontext eines Knotens einen String in Form eines XPath-Ausdruckes, der diesen Knoten beschreibt. Kann z.B. zur Erläuterung bei Fehlermeldungen eingesetzt werden. ||
||   || *xsb:return-composed-string-if-not-empty*({{{string-before}}} _as_ {{{xs:string?}}}; {{{tested-string}}} _as_ {{{xs:string?}}}; {{{string-after}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || Diese Funktion fügt vor und nach dem zu testenden String die übergebenen Strings ein, wenn der zu testende String nicht leer ist. ||
||   || *xsb:return-default-if-empty*({{{input}}} _as_ {{{xs:string?}}}; {{{default}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || gibt einen übergebenen Standardwert aus, wenn der übergeben String leer ist oder nur Whitespace enthält, sonst den String selbst ||
||   || *xsb:roman-number-char-to-integer*({{{input}}} _as_ {{{xs:string?}}}) || [Zahlen_und_Rechnen] || Diese Funktion wandelt eine römische Ziffer (eines der Zeichen I, V, X, L, C, D, M) in einen Integer-Wert um. Ist das eingegebene Zeichen keine römische Ziffer oder leer, ist das Ergebnis 0. Die Funktion ist nicht case-sensitiv, d.h. Groß-/Kleinschreibung der Eingabe spielt keine Rolle. ||
||   || *xsb:roman-numeral-to-integer*({{{input}}} _as_ {{{xs:string?}}}) || [Zahlen_und_Rechnen] || Diese Funktion wandelt eine römische Zahl in einen Integer-Wert um. Ist der eingegebene Wert keine römische Zahl oder leer, ist das Ergebnis 0. Die Funktion ist nicht case-sensitiv, d.h. Groß-/Kleinschreibung der Eingabe spielt keine Rolle. ||
|| *S* || *intern:sgn*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || gibt je nach Vorzeichen und Wert des Arguments `-1`, `0` oder `+1` zurück ||
||   || *intern:sin*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || Sinus-Funktion (Reihenentwicklung) ||
||   || *intern:sinus-iterator*({{{NormalisiertesArgument}}} _as_ {{{xs:anyAtomicType}}}; {{{vortrag}}} _as_ {{{xs:anyAtomicType}}}; {{{iteration}}} _as_ {{{xs:integer}}}) || [Mathematische_Funktionen] || Iterator zur Berechnung des Sinus ||
||   || *intern:sqrt*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet die Quadratwurzel ||
||   || *intern:sqrt2*() || [Mathematische_Funktionen] || Wurzel aus 2 mit 1,4142135623730950488… (Konstante) ||
||   || *intern:standard-deviation*({{{sequence_of_numeric_values}}} _as_ {{{xs:anyAtomicType+}}}) || [Mathematische_Funktionen] || berechnet die Standardabweichung einer Stichprobe als Quadratwurzel der Varianz ||
||   || *xsb:scheme-from-url*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion gibt den scheme-Teil von einer absoluten URL zurück. ||
||   || *xsb:sgn*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || gibt je nach Vorzeichen und Wert des Arguments `-1`, `0` oder `+1` zurück ||
||   || *xsb:sin*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || Sinus-Funktion (Reihenentwicklung) ||
||   || *xsb:sqrt*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berechnet die Quadratwurzel ||
||   || *xsb:standard-deviation*({{{sequence_of_numeric_values}}} _as_ {{{xs:anyAtomicType+}}}) || [Mathematische_Funktionen] || berechnet die Standardabweichung einer Stichprobe als Quadratwurzel der Varianz ||
|| *T* || *intern:tan*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berchnet den Tangens ||
||   || *xsb:tan*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Mathematische_Funktionen] || berchnet den Tangens ||
||   || *xsb:tau*() || [Mathematische_Funktionen] || Konstante Tau mit 2 {{{*}}} Pi = 6,28318530717958647692528676655900576839433879875021… ||
||   || *xsb:trim*({{{input}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || entfernt Whitespace am Anfang und am Ende. Im Unterschied zu `normalize-space()` wird Whitespace in der Mitte nicht berücksichtigt. ||
||   || *xsb:trim-left*({{{input}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || entfernt führenden Whitespace ||
||   || *xsb:trim-right*({{{input}}} _as_ {{{xs:string?}}}) || [Strings_und_Texte] || entfernt Whitespace am Ende ||
||   || *xsb:type-annotation*({{{arg}}} _as_ {{{xs:anyAtomicType}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || ermittelt den Typ eines Atomic Values ||
||   || *xsb:type-annotation*({{{arg}}} _as_ {{{xs:anyAtomicType}}}) || [Interne_Funktionen] || ermittelt den Typ eines Atomic Values ||
|| *U* || *xsb:url-has-authority*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL einen Authority-Teil hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:url-has-fileExtention*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL einen Dateinamen beinhaltet, und ob dieser Dateiname eine Dateierweiterung hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:url-has-fragment*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL einen Fragment-Teil (eine Referenz auf einen Dokumenten-Teil nach einem Hash-Zeichen `#`) hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *xsb:url-has-query*({{{URL}}} _as_ {{{xs:string?}}}) || [Dateien_und_Dateisystem] || Diese Funktion überprüft, ob die angegebene URL einen Query-Teil hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
|| *V* || *intern:validate-test-node*({{{test-node}}} _as_ {{{element()}}}; {{{function-name}}} _as_ {{{xs:string}}}) || [Testen_von_Stylesheets] || Diese Funktion testet ein Element auf seine Eignung als Eingabe-Knoten für Funktionen wie `xsb:internals.test.function.withTestItem.BooleanResult`. ||
||   || *intern:variance*({{{sequence_of_numeric_values}}} _as_ {{{xs:anyAtomicType+}}}) || [Mathematische_Funktionen] || berechnet aus einer Folge von numerischen Werten die Stichprobenvarianz ||
||   || *xsb:variance*({{{sequence_of_numeric_values}}} _as_ {{{xs:anyAtomicType+}}}) || [Mathematische_Funktionen] || berechnet aus einer Folge von numerischen Werten die Stichprobenvarianz ||
||   || *xsb:vendor-hash*({{{product-name}}} _as_ {{{xs:string?}}}; {{{product-version}}} _as_ {{{xs:string?}}}; {{{java-available}}} _as_ {{{xs:boolean}}}; {{{is-schema-aware}}} _as_ {{{xs:boolean}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || Diese Funktion ermittelt aus den übergebenen System-Parameter einen Hashwert, der z.B. für Vergleiche verwendet werden kann ||
||   || *xsb:vendor-hash*({{{product-name}}} _as_ {{{xs:string?}}}; {{{product-version}}} _as_ {{{xs:string?}}}; {{{java-available}}} _as_ {{{xs:boolean}}}; {{{is-schema-aware}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || Diese Funktion ermittelt aus den übergebenen System-Parameter einen Hashwert, der z.B. für Vergleiche verwendet werden kann ||


= Liste der benannten Templates =

|| *I* || *intern:internals.FatalError* (_required_ {{{errorID}}} _as_ {{{xs:string?}}}; _required_ {{{caller}}} _as_ {{{xs:string?}}}) || [Interne_Funktionen] || Dieses Template gibt eine Fehlermeldung bei Fehlern in der Logik der XSL-SB aus. Da das Ausführungsverhalten in solchen Situationen nicht vorhersehbar ist, wird die Verarbeitung abgebrochen. ||
||   || *intern:internals.logging.Dispatcher* (_required_ {{{log-entry.write-to-console.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file-as-comment.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file-as-element.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file-as-html.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file-as-text.tunneld}}} _as_ {{{xs:boolean}}}) || [LoggingSystem] || Dieses Template verteilt die Nachrichten an die passenden Ausgabe-Templates. Parameter werden über `tunnel="yes"` durchgereicht (getunnelt). ||
||   || *intern:internals.logging.MakeFooter.element* || [LoggingSystem] || Dieses Template erzeugt bei der Ausgabe als XML den Fuß, speziell das schließende Element ||
||   || *intern:internals.logging.MakeFooter.html* || [LoggingSystem] || Dieses Template erzeugt bei der Ausgabe als HTML den Fuß, speziell die schließenden Tags ||
||   || *intern:internals.logging.MakeHeader.element* || [LoggingSystem] || Dieses Template erzeugt bei der Ausgabe als xml den Kopf, speziell das öffnende Element ||
||   || *intern:internals.logging.MakeHeader.html* (_optional_ {{{titel}}} _as_ {{{xs:string?}}}) || [LoggingSystem] || Dieses Template erzeugt bei der Ausgabe als xml den Kopf, speziell das öffnende Element ||
||   || *intern:internals.logging.MakeThead.HTML* (_optional_ {{{log-entry.preText}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.ID}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.timeStamp}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.processedFile}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.level}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.text}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.category}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.postText}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.write-preText}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-ID}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-timeStamp}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-processedFile}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-level}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-text}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-category}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-postText}}} _as_ {{{xs:boolean}}}) || [LoggingSystem] || Dieses Template erzeugt eine Zeile mit dem Tabellenkopf für die Ausgabe als HTML. Die Signatur des Templates entspricht einem normalen Logging-Eintrag (mit Ausnahme von `log-entry.timeStamp`, das hier `xs:string` ist), die übergebenen Werte werden in die Spaltenüberschriften geschrieben. Werden keine Werte übergeben, werden Standardwerte verwendet. ||
||   || *intern:internals.logging.Output* (_optional_ {{{log-entry.preText}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.ID}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.timeStamp}}} _as_ {{{xs:dateTime?}}}; _optional_ {{{log-entry.processedFile}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.level}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.text}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.category}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.postText}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.linebreak-string}}} _as_ {{{xs:string?}}}; _required_ {{{log-entry.write-to-console}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file-as-comment}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file-as-element}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file-as-html}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-to-file-as-text}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-preText}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-ID}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-timeStamp}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-processedFile}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-level}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-text}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-category}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-postText}}} _as_ {{{xs:boolean}}}) || [LoggingSystem] || Dieses Template ist der zentrale Einstieg zur Realisierung des Logging. Es nimmt die Logging-Parameter entgegen, wandelt sie in Tunnel-Parameter um und ruft den Dispatcher `intern:internals.logging.Dispatcher` auf. Es ist recht abstrakt und sollte zur Benutzung von Wrappern (wie z.B. ``xsb:internals.Logging``) umgeben werden. ||
||   || *intern:internals.logging.Render-to-html* (_optional_ {{{log-entry.preText.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.ID.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.timeStamp.tunneld}}} _as_ {{{xs:dateTime?}}}; _optional_ {{{log-entry.processedFile.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.level.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.text.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.category.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.postText.tunneld}}} _as_ {{{xs:string?}}}; _required_ {{{log-entry.write-preText.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-ID.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-timeStamp.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-processedFile.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-level.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-text.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-category.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-postText.tunneld}}} _as_ {{{xs:boolean}}}) || [LoggingSystem] || Dieses Template rendert die Message-Parameter als HTML-Elemente. Parameter werden über `tunnel="yes"` empfangen (getunnelt). ||
||   || *intern:internals.logging.Render-to-string* (_optional_ {{{log-entry.preText.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.ID.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.timeStamp.tunneld}}} _as_ {{{xs:dateTime?}}}; _optional_ {{{log-entry.processedFile.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.level.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.text.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.category.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.postText.tunneld}}} _as_ {{{xs:string?}}}; _required_ {{{log-entry.write-preText.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-ID.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-timeStamp.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-processedFile.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-level.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-text.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-category.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-postText.tunneld}}} _as_ {{{xs:boolean}}}) || [LoggingSystem] || Dieses Template rendert die Message-Parameter als Text. Parameter werden über `tunnel="yes"` empfangen (getunnelt). ||
||   || *intern:internals.logging.Render-to-xml* (_optional_ {{{log-entry.preText.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.ID.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.timeStamp.tunneld}}} _as_ {{{xs:dateTime?}}}; _optional_ {{{log-entry.processedFile.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.level.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.text.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.category.tunneld}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.postText.tunneld}}} _as_ {{{xs:string?}}}; _required_ {{{log-entry.write-preText.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-ID.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-timeStamp.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-processedFile.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-level.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-text.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-category.tunneld}}} _as_ {{{xs:boolean}}}; _required_ {{{log-entry.write-postText.tunneld}}} _as_ {{{xs:boolean}}}) || [LoggingSystem] || Dieses Template rendert die Message-Parameter als XML-Elemente. Parameter werden über `tunnel="yes"` empfangen (getunnelt). ||
||   || *intern:internals.logging.Write-to-console* || [LoggingSystem] || Dieses Template gibt die Nachricht auf der Konsole aus. Parameter werden über `tunnel="yes"` an das Template `intern:internals.logging.Render-to-string` durchgereicht (getunnelt). ||
||   || *intern:internals.logging.Write-to-file-as-comment* || [LoggingSystem] || Dieses Template gibt die Nachricht als Kommentar in den Output-Stream (in der Regel: die Ergebnis-Datei) aus. Parameter werden über `tunnel="yes"` an das `Template intern:internals.logging.Render-to-string` durchgereicht (getunnelt). ||
||   || *intern:internals.logging.Write-to-file-as-element* (_optional_ {{{log-entry.linebreak-string.tunneld}}} _as_ {{{xs:string?}}}) || [LoggingSystem] || Dieses Template gibt die Nachricht als XML-Element in den Output-Stream (in der Regel: die Ergebnis-Datei) aus. Parameter werden über `tunnel="yes"` an das `Template intern:internals.logging.Render-to-xml` durchgereicht (getunnelt). ||
||   || *intern:internals.logging.Write-to-file-as-html* || [LoggingSystem] || Dieses Template gibt die Nachricht als HTML-Elemente in den Output-Stream (in der Regel: die Ergebnis-Datei) aus. Parameter werden über `tunnel="yes"` an das `Template intern:internals.logging.Render-to-html` durchgereicht (getunnelt). ||
||   || *intern:internals.logging.Write-to-file-as-text* (_optional_ {{{log-entry.linebreak-string.tunneld}}} _as_ {{{xs:string?}}}) || [LoggingSystem] || Dieses Template gibt die Nachricht als Text in den Output-Stream (in der Regel: die Ergebnis-Datei) aus. Parameter werden über `tunnel="yes"` an das `Template intern:internals.logging.Render-to-string` durchgereicht (getunnelt). ||
||   || *intern:internals.ProvisionalError* (_optional_ {{{message}}} _as_ {{{xs:string?}}}; _optional_ {{{level}}} _as_ {{{xs:string?}}}; _optional_ {{{caller}}} _as_ {{{xs:string?}}}; _optional_ {{{show-context}}} _as_ {{{xs:boolean}}}; _optional_ {{{write-to-file}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || Zu Beginn der Verarbeitung von `internals.xsl` (und damit von allen Stylesheets, die `internals.xsl` einbinden), sind ein paar Parameter für das Logging noch nicht gesetzt. Um trotzdem eine Fehlermeldung zu ermöglichen (beispielsweise bei der Prüfung von Stylesheet-Parametern), wird im diesen Template eine Fehlermeldung unter Verzicht aus betroffene Parameter auf der Konsole ausgegeben. ||
||   || *intern:internals.Stylecheck* || [StyleCheck] || Dieses Template ist der zentrale Einstieg zur Realisierung der Style-Checks. ||
||   || *intern:internals.Stylecheck.CallTemplateTestFunction* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || Dieses Template überprüft die Syntax von Funktionstests mit `xsl:call-template name="xsb:internals.test.Function"`. ||
||   || *intern:internals.Stylecheck.CallTemplateTestFunctionWithTestItem* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || Dieses Template testet den Aufruf von Funktionstests mit `xsb:internals.test.function.withTestItem.BooleanResult"`, `xsb:internals.test.function.withTestItem.StringResult"` usw.. ||
||   || *intern:internals.Stylecheck.CheckMisplacedIntern* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || tested, ob im Stylesheet `intern:{{{*}}}`-Elemente innerhalb von matching oder named templates stehen, da diese fälschlicherweise in das Ausgabedokument geschrieben werden könnten. ||
||   || *intern:internals.Stylecheck.CheckXSLMessage* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || tested, ob im Stylesheet `xsl:message`-Elemente verwendet werden. ||
||   || *intern:internals.Stylecheck.DocumentationTests* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || Dieses Template testet verschiedene Aspekte der Qualität der Dokumentation. ||
||   || *intern:internals.Stylecheck.EmptySequenceAllowed* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || Dieses Template testet, ob Funktionen oder Templates eine `empty sequence` als Resultat liefern dürfen. ||
||   || *intern:internals.Stylecheck.ListTO_DOs* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || Dieses Template listet Texte und Kommentare, die "TODO" enthalten. Die Groß-/Kleinschreibung wird nicht berücksichtigt. ||
||   || *intern:internals.Stylecheck.MissingTests* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || Dieses Template testet, ob alle Funktionen mit Test versehen sind. ||
||   || *intern:internals.Stylecheck.MissingTypes* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || Dieses Template testet, ob alle Variablen, Parameter und Funktionen getypt sind. ||
||   || *intern:internals.Stylecheck.RequiredParameter* (_required_ {{{Dokument}}} _as_ {{{document-node()}}}) || [StyleCheck] || Dieses Template testet, ob bei Template-Parametern das required-Attribute gesetzt ist. ||
||   || *intern:internals.stylecheck.self-test* || [StyleCheck] || Dieses Template führt die lokalen Selbst-Tests aus. ||
||   || *xsb:internals.Error* (_optional_ {{{message}}} _as_ {{{xs:string?}}}; _optional_ {{{level}}} _as_ {{{xs:string?}}}; _optional_ {{{caller}}} _as_ {{{xs:string?}}}; _optional_ {{{show-context}}} _as_ {{{xs:boolean}}}; _optional_ {{{write-to-file}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || Dieses Template gibt eine einfache Fehlermeldung aus. Ausgabeart und -ziel werden über die Stylesheet-Parameter bestimmt, wenn keine expliziten Einstellungen übergeben werden. ||
||   || *xsb:internals.FunctionError* (_optional_ {{{message}}} _as_ {{{xs:string?}}}; _optional_ {{{level}}} _as_ {{{xs:string?}}}; _optional_ {{{caller}}} _as_ {{{xs:string?}}}) || [Interne_Funktionen] || Dieses Template gibt eine einfache Fehlermeldung aus. Es ist ein Wrapper für `xsb:internals.Error`, der die Rückgabe von Werten durch das Template unterbindet (was innerhalb von Funktionen in der Regel unerwünscht ist und ggfs. zu Fehlern führen kann). ||
||   || *xsb:internals.Log-system-properties* (_optional_ {{{logging-level}}} _as_ {{{xs:string}}}) || [Interne_Funktionen] || Dieses Template gibt die Werte der Funktion `system-property()` für die im XSLT-Standard vorgegebenen Parameter vgl. `http://www.w3.org/TR/xslt20/#function-system-property` aus. ||
||   || *xsb:internals.Logging* (_optional_ {{{log-entry.preText}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.ID}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.timeStamp}}} _as_ {{{xs:dateTime?}}}; _optional_ {{{log-entry.processedFile}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.level}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.text}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.category}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.postText}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.linebreak-string}}} _as_ {{{xs:string?}}}; _optional_ {{{log-entry.write-to-console}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-to-file}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-to-file-as-comment}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-to-file-as-element}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-to-file-as-html}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-to-file-as-text}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-preText}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-ID}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-timeStamp}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-processedFile}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-level}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-text}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-category}}} _as_ {{{xs:boolean}}}; _optional_ {{{log-entry.write-postText}}} _as_ {{{xs:boolean}}}) || [Interne_Funktionen] || Dieses Template ist ein Wrapper für `intern:internals.logging.Output` für ein einfaches Logging. ||
||   || *xsb:internals.MakeFooter* || [Interne_Funktionen] || Dieses Template erzeugt bei der Ausgabe in eine Datei den Fuß, z.B. das schließende HTML-Tag oder XML-Element. ||
||   || *xsb:internals.MakeHeader* || [Interne_Funktionen] || Dieses Template erzeugt bei der Ausgabe in eine Datei den Dateikopf, z.B. das Wurzelelement in XML oder Wurzel und Head in HTML. ||
||   || *xsb:internals.test.Function* (_required_ {{{caller}}} _as_ {{{xs:string}}}; _required_ {{{actual-value}}}; _required_ {{{reference-value}}}) || [Testen_von_Stylesheets] || Dieses Template dient zum Testen einer Funktion. Es nimmt den Namen der Funktion sowie Ist- und Soll-Wert entgegen und vergleicht sie. Je nach Ergebnis wird ein Bericht an das Logging-System ausgegeben. ||
||   || *xsb:internals.test.function.withTestItem.BooleanResult* (_required_ {{{test-node}}} _as_ {{{element()}}}; _required_ {{{function-name}}} _as_ {{{xs:string}}}; _required_ {{{actual-value}}} _as_ {{{xs:boolean}}}) || [Testen_von_Stylesheets] || Dieses Template unterstützt das `Testen von Funktionen mit Testlisten`, indem es einen `Testknoten` für das Template `xsb:internals.test.Function` aufbereitet. ||
||   || *xsb:internals.test.function.withTestItem.NumericResult* (_required_ {{{test-node}}} _as_ {{{element()}}}; _required_ {{{function-name}}} _as_ {{{xs:string}}}; _required_ {{{actual-value}}} _as_ {{{xs:anyAtomicType}}}) || [Testen_von_Stylesheets] || Dieses Template unterstützt das `Testen von Funktionen mit Testlisten`, indem es einen `Testknoten` für das Template `xsb:internals.test.Function` aufbereitet. ||
||   || *xsb:internals.test.function.withTestItem.StringResult* (_required_ {{{test-node}}} _as_ {{{element()}}}; _required_ {{{function-name}}} _as_ {{{xs:string}}}; _required_ {{{actual-value}}} _as_ {{{xs:string?}}}) || [Testen_von_Stylesheets] || Dieses Template unterstützt das `Testen von Funktionen mit Testlisten`, indem es einen `Testknoten` für das Template `xsb:internals.test.Function` aufbereitet. ||
||   || *xsb:internals.testing.SkippedTests* (_required_ {{{caller}}} _as_ {{{xs:string}}}; _optional_ {{{level}}} _as_ {{{xs:string}}}) || [Testen_von_Stylesheets] || Ausgabe einer Warnung für übersprungene Tests ||
|| *N* || *intern:numbers.self-test* || [Zahlen_und_Rechnen] || Dieses Template führt die lokalen Selbst-Tests aus. ||


_Hinweis: Diese Wiki-Seite wird automatisch aus der Dokumentation der einzenen Stylesheets der XSLT-SB erzeugt und soll deshalb nicht bearbeitet werden._

_Seite erstellt am 24.03.2012_


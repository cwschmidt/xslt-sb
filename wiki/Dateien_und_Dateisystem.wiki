#summary Überblick der Funktionen und Templates von `files.xsl`
#labels Dokumentation

= `files.xsl` =

Stylesheet: `files.xsl`

Dieses Stylesheet enthält Funktionen rund um das Dateisystem.

Ein Großteil der Funktionen führt Formatchecks auf Strings aus und extrahiert Teile aus Strings, um den Umgang mit externe Dateien zu vereinfachen. Da der von XSLT präferierte Typ `xs:anyURI` recht unspezifisch ist, wird dabei auf URLs nach `RFC 1808` zurückgegriffen.

Einige Wertebereiche und Funktionsergebnisse sind nicht absolut konform zu RFC 1808 oder auch RFC 3986 (URIs), um den praktischen Nutzen zu erhöhen. So ist beispielsweise laut RFC 1808 die Tilde (~) kein gültiges Zeichen in URLs, sie wurde hier aber zugelassen.


_Hinweis: Die Dokumentation entstammt dem Stylesheet selbst, die Funktionen und Templates sind dort ausführlich dokumentiert._

= Liste der Funktionen =

|| *D* || *[xsb_decode_from_url xsb:decode-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || wandelt Hex-codierte Zeichen in URLs in Zeichen um. ||
|| *F* || *[xsb_file_exists xsb:file-exists]*({{{absoluteURL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_file_exists xsb:file-exists]*({{{relativeURL}}} _as_ {{{xs:string?}}}; {{{baseURL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[intern_file_exists intern:file-exists]*({{{absoluteURL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[intern_file_exists intern:file-exists]*({{{absoluteURL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[intern_file_exists intern:file-exists]*({{{absoluteURL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[intern_file_exists intern:file-exists]*({{{absoluteURL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene Datei lokal vorhanden ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_file_extension_from_mediatype xsb:file-extension-from-mediatype]*({{{mediatype}}} _as_ {{{xs:string?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) ||   || Diese Funktion ermittelt aus dem Mediatyp (auch `MIME-Typ` genannt) die Dateierweiterung. ||
||   || *[xsb_file_extension_from_mediatype xsb:file-extension-from-mediatype]*({{{mediatype}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion ermittelt aus dem Mediatyp (auch `MIME-Typ` genannt) die Dateierweiterung. ||
||   || *[xsb_fileExtention_from_url xsb:fileExtention-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion ermittelt eine eventuelle Dateierweiterung aus einer URL. ||
||   || *[xsb_fileName_and_fileExtention_from_url xsb:fileName-and-fileExtention-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion gibt Dateinamen und Dateierweiterung aus einer URL zurück. ||
||   || *[xsb_fileName_from_url xsb:fileName-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion ermittelt einen Dateinamen ohne eventuelle Dateierweiterung aus einer URL. ||
||   || *[xsb_fragment_from_url xsb:fragment-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion gibt den Fragment-Teil von einer URL zurück. ||
|| *I* || *[xsb_is_absolute_url xsb:is-absolute-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL absolut ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_is_network_server_url xsb:is-network-server-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL ausschließlich einen Netzwerk-Server referenziert, d.h. keinen lokalen Teil hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_is_path_only_url xsb:is-path-only-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL ein Pfad ist, d.h. es wird durch die URL keine Datei referenziert. Kriterium ist, ob die URL entweder (a) einen Netzwerk-Server referenziert oder (b) mit "/", "/." oder "/.." endet oder (c) "." oder ".." ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_is_relative_url xsb:is-relative-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL relativ ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_is_shortcut_only_url xsb:is-shortcut-only-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL nur aus Pfad-Shortcuts ("/", ".", "..") besteht. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_is_url xsb:is-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob der eingegebene String eine gültige URL gemäß `RFC 1808` ist. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
|| *M* || *[xsb_mediatype_from_url xsb:mediatype-from-url]*({{{URLwithFileExtension}}} _as_ {{{xs:string?}}}; {{{warn-if-wrong-input}}} _as_ {{{xs:boolean}}}) ||   || Diese Funktion ermittelt aus der Dateierweiterung den Mediatyp (auch `MIME-Typ` genannt). ||
||   || *[xsb_mediatype_from_url xsb:mediatype-from-url]*({{{URLwithFileExtension}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion ermittelt aus der Dateierweiterung den Mediatyp (auch `MIME-Typ` genannt). ||
|| *P* || *[xsb_path_from_url xsb:path-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion ermittelt einen Pfad ohne eventuelle Dateinamen und Dateierweiterung aus einer URL. ||
|| *Q* || *[xsb_query_from_url xsb:query-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion gibt den Query-Teil von einer URL zurück. ||
|| *R* || *[xsb_remove_query_and_fragment_from_url xsb:remove-query-and-fragment-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion entfernt Query- und Fragment-Teil von einer URL. ||
|| *S* || *[xsb_scheme_from_url xsb:scheme-from-url]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion gibt den scheme-Teil von einer absoluten URL zurück. ||
|| *U* || *[xsb_url_has_authority xsb:url-has-authority]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL einen Authority-Teil hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_url_has_fileExtention xsb:url-has-fileExtention]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL einen Dateinamen beinhaltet, und ob dieser Dateiname eine Dateierweiterung hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_url_has_fragment xsb:url-has-fragment]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL einen Fragment-Teil (eine Referenz auf einen Dokumenten-Teil nach einem Hash-Zeichen `#`) hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||
||   || *[xsb_url_has_query xsb:url-has-query]*({{{URL}}} _as_ {{{xs:string?}}}) ||   || Diese Funktion überprüft, ob die angegebene URL einen Query-Teil hat. Das Ergebnis ist ein Wahrheitswert (`xs:boolean`, `true()` oder `false()`).  ||

_Hinweis: Diese Wiki-Seite wird automatisch aus der Dokumentation der einzenen Stylesheets der XSLT-SB erzeugt und soll deshalb nicht bearbeitet werden._

_Seite erstellt am 28.05.2012_

